// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: serviceb/api.proto

package serviceb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceBAPIClient is the client API for ServiceBAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceBAPIClient interface {
	Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error)
}

type serviceBAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceBAPIClient(cc grpc.ClientConnInterface) ServiceBAPIClient {
	return &serviceBAPIClient{cc}
}

func (c *serviceBAPIClient) Hello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloResponse, error) {
	out := new(HelloResponse)
	err := c.cc.Invoke(ctx, "/serviceb.ServiceBAPI/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceBAPIServer is the server API for ServiceBAPI service.
// All implementations must embed UnimplementedServiceBAPIServer
// for forward compatibility
type ServiceBAPIServer interface {
	Hello(context.Context, *HelloRequest) (*HelloResponse, error)
	mustEmbedUnimplementedServiceBAPIServer()
}

// UnimplementedServiceBAPIServer must be embedded to have forward compatible implementations.
type UnimplementedServiceBAPIServer struct {
}

func (UnimplementedServiceBAPIServer) Hello(context.Context, *HelloRequest) (*HelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (UnimplementedServiceBAPIServer) mustEmbedUnimplementedServiceBAPIServer() {}

// UnsafeServiceBAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceBAPIServer will
// result in compilation errors.
type UnsafeServiceBAPIServer interface {
	mustEmbedUnimplementedServiceBAPIServer()
}

func RegisterServiceBAPIServer(s grpc.ServiceRegistrar, srv ServiceBAPIServer) {
	s.RegisterService(&ServiceBAPI_ServiceDesc, srv)
}

func _ServiceBAPI_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceBAPIServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serviceb.ServiceBAPI/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceBAPIServer).Hello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceBAPI_ServiceDesc is the grpc.ServiceDesc for ServiceBAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceBAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "serviceb.ServiceBAPI",
	HandlerType: (*ServiceBAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _ServiceBAPI_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serviceb/api.proto",
}
